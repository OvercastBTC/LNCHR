class SendInput {
	static inputStructSize:=A_PtrSize=8?40:28
	__new(inputArray){
		
		; Input:
		; 	- inputArray, an array of associative arrays containing the relevant data for keyboard input structs / mouse input structs and or harware input strucs.
		;		Eg, inputArray:=[ki1,...,mi1,...,kix,...], where kik and mik is on the form:
		;		mi:={type:="mi", dx:dx, dy:dy, mouseData:mouseData, dwFlags:dwFlags, time:time, dwExtraInfo:dwExtraInfo }
		;		ki:={type:="ki",vk:wVk,sc:wScan,dwFlags,dwFlags, time:time, dwExtraInfo:dwExtraInfo}	
		; 		hi:={type:"hi",uMsg:uMsg,wParamL:wParamL,wParamH:wParamH}
		; Url: 
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646273(v=vs.85).aspx (MOUSEINPUT structure) 	(mi)
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646271(v=vs.85).aspx (KEYBDINPUT structure)	(ki)
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646269(v=vs.85).aspx (HARDWAREINPUT structure)	(hi)
		; 	
		this.nInputs:=inputArray.length()
		this.putInputStructsToMem(inputArray)																; Stores the inputArray in memory. After this, inputArray is not needed any more.
	}	
	putInputStructsToMem(inputArray){
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646270(v=vs.85).aspx (Input structure)
		;	DWORD type;
		; union {
		;	MOUSEINPUT    mi;
		;	KEYBDINPUT    ki;
		;	HARDWAREINPUT hi;
  		;}
		local o, k, inputStruct
		this.GlobalAlloc(SendInput.inputStructSize*this.nInputs)											; Allocate memory
		o:=0																								; Offset tracker
		for k, inputStruct in inputArray {
			inputStruct.type="ki" 	? this.putKeybdStruct(inputStruct,o) 									; ki
									: inputStruct.type="mi"	?	this.putMouseStruct(inputStruct,o)			; mi
															:	this.putHardwareStruct(inputStruct,o)		; hi
			o+=SendInput.inputStructSize																	; Increments offset by one structure size.
		}
		return
	}
	putMouseStruct(mi,o){
		; Input:
		;	- information about the mouse event, mi:={dx:dx,dy:dy,mouseData:mouseData,dwFlags:dwFlags,time:time,dwExtraInfo:dwExtraInfo}
		;	- o, memory offset tracker.
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646273(v=vs.85).aspx (MOUSEINPUT structure)
		; mi:
		; LONG      dx;
		; LONG      dy;
		; DWORD     mouseData;
		; DWORD     dwFlags;
		; DWORD     time;
		; ULONG_PTR dwExtraInfo;
		
		static INPUT_MOUSE:=0															; Mouse input has type 0

		NumPut(INPUT_MOUSE,		this.hMem+0, o, "Uint"), 	o+=A_PtrSize				; type
		NumPut(mi.dx,			this.hMem+0, o, "Int"), 	o+=4						; dx.
		NumPut(mi.dy,			this.hMem+0, o, "Int"), 	o+=4						; dy.
		NumPut(mi.mouseData,	this.hMem+0, o, "UInt"), 	o+=4						; Mousedata.
		NumPut(mi.dwFlags,		this.hMem+0, o, "UInt"), 	o+=4						; dwFlags.
		NumPut(mi.time,			this.hMem+0, o, "UInt"), 	o+=A_PtrSize				; Time
		NumPut(mi.dwExtraInfo,	this.hMem+0, o, "Uptr")									; dwExtraInfo
		
		return 
	}
	putKeybdStruct(ki,o){
		; Input:
		;	- information about the key, ki:={vk:wVk,sc:wScan,dwFlags:dwFlags,time:time,dwExtraInfo:dwExtraInfo}
		;	- o, memory offset tracker.
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646271(v=vs.85).aspx (KEYBDINPUT structure)
		;	ki:
		; 	WORD      wVk;				
		;	WORD      wScan;			
		;	DWORD     dwFlags;			
		;	DWORD     time;				
		;	ULONG_PTR dwExtraInfo;		
		;
		static INPUT_KEYBOARD:=1														; keyboard input has type 1										
		
		NumPut(INPUT_KEYBOARD,	this.hMem+0, o, "Uint"), 	o+=A_PtrSize				; type
		NumPut(ki.vk,			this.hMem+0, o, "UShort"),	o+=2						; wVk
		NumPut(ki.sc,			this.hMem+0, o, "UShort"), 	o+=2						; wScan
		NumPut(ki.dwFlags,		this.hMem+0, o, "Uint"), 	o+=4						; dwFlags.
		NumPut(ki.time,			this.hMem+0, o, "Uint"), 	o+=A_PtrSize				; Time, if zero, system provides a time stamp 
		NumPut(ki.dwExtraInfo,	this.hMem+0, o, "Uptr")									; dwExtraInfo
	
		return
	}
	putHardwareStruct(hi,o){
		;																				- - > UNTESTED < - -
		;	HARDWAREINPUT structure:
		;	Contains information about a simulated message generated by an input device other than a keyboard or mouse.
		;	Input:
		;		- hi:={uMsg:uMsg,wParamL:wParamL,wParamH:wParamH}
		; URL:
		;	-	https://msdn.microsoft.com/en-us/library/windows/desktop/ms646269(v=vs.85).aspx (HARDWAREINPUT structure)
		;	hi:
		;	DWORD uMsg;
		;	WORD  wParamL; (Note: The low-order word of the lParam parameter for uMsg. That is, this is not the wParam of the message. The prefixed w is for WORD)
		;	WORD  wParamH; (Note: The high-order word of the lParam parameter for uMsg.)

		static INPUT_HARDWARE:=2
		
		NumPut(INPUT_HARDWARE,	this.hMem+0, o, "Uint"), 	o+=A_PtrSize				; type
		NumPut(hi.uMsg,			this.hMem+0, o, "Uint"), 	o+=4						; uMsg
		NumPut(hi.wParamL,		this.hMem+0, o, "Ushort"), 	o+=2						; wParamL
		NumPut(hi.wParamH,		this.hMem+0, o, "Ushort") 								; wParamH
		
		return
	}
	send(){
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/ms646310(v=vs.85).aspx (SendInput function)
		; UINT    nInputs,	this.nInputs 				set in __new()
		; LPINPUT pInputs,	this.hMem					Array built in putInputStructsToMem()
		; int cbSize		SendInput.inputStructSize		static
		local r
		r:=DllCall("User32.dll\SendInput", "Uint", this.nInputs, "Ptr", this.hMem, "Int", SendInput.inputStructSize)
		return r
	}
	GlobalAlloc(dwBytes){
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/aa366574(v=vs.85).aspx (GlobalAlloc function)
		static GMEM_ZEROINIT:=0x0040	; Zero fill memory
		static uFlags:=GMEM_ZEROINIT	; For clarity.
		local h
		h:=DllCall("Kernel32.dll\GlobalAlloc", "Uint", uFlags, "Ptr", dwBytes, "Ptr")
		if !h
			throw Exception("Memory alloc failed.",-1)
		this.hMem:=h
		return 
	}
	GlobalFree(){
		; URL:
		;	- https://msdn.microsoft.com/en-us/library/windows/desktop/aa366579(v=vs.85).aspx (GlobalFree function)
		local h
		h:=DllCall("Kernel32.dll\GlobalFree", "Ptr", this.hMem, "Ptr")
		if h
			throw Exception("Memory free failed",-1)
		return h
	}
	__Delete(){
		local h
		if this.hMem
			h:=this.GlobalFree()
		return h
	}	
}